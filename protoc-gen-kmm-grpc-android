#!/usr/bin/env python3

from google.protobuf.compiler.plugin_pb2 import CodeGeneratorResponse
from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    ServiceDescriptorProto, MethodDescriptorProto

from generator import Generator

class KMMGrpcAndroidGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-android")
    
    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass

    def getServiceImports(self, protoFile: FileDescriptorProto,
                          serv: ServiceDescriptorProto) -> list[str]:
        importFlow = "import kotlinx.coroutines.flow."
        lines = super().getServiceImports(protoFile, serv)
        lines.extend([
            importFlow + "Flow",
            importFlow + "map",
            # Not sure if service.name is the whole story, but it should be
            # an easy fix if not.
            "import %s.%sGrpcKt.%sCoroutineStub" % \
                (self.javaPackage, serv.name, serv.name),
            ""
        ])
        return lines
    
    def getServiceHeader(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto) -> list[str]:
        lines = super().getServiceHeader(protoFile, serv)
        serviceName = self.getServiceName(protoFile, serv)
        lines.extend([
            "    private val stub: %sCoroutineStub" % serv.name,
            "): %sGrpcClient {" % serviceName,
        ])
        return lines

    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto) -> list[str]:
        lines = self.getMethodSignature(protoFile,
                                        serv,
                                        method)
        indent = "    "
        lines[0] = indent + "override " + lines[0][4:]
        lines[-1] += " ="
        methodName = self.memberCase(method.name)
        resType = self.convertTypeName(method.output_type)
        if resType.endswith("?"):
            resType = resType[:-1]
        if method.client_streaming:
            input = "map { it.toProto() }"
        else:
            input = "toProto()"
        if method.server_streaming:
            output = "stub.%s(request.%s).map { %s.fromProto(it) }" % \
                (methodName, input, resType)
        else:
            output = "%s.fromProto(stub.%s(request.%s))" % \
                (resType, methodName, input)
        lines.extend([indent + "    " + output, ""])
        return lines

    def getClientVariety(self):
        return "AndroidClient"
    
    def getServiceOpenBracket(self):
        return "("


def main():
    generator = KMMGrpcAndroidGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
