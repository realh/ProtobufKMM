#!/usr/bin/env python3

import os.path
import sys

from google.protobuf.compiler.plugin_pb2 import \
    CodeGeneratorRequest, CodeGeneratorResponse

from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    ServiceDescriptorProto, MethodDescriptorProto

from generator import Generator

class AuxGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-ios-main")


class KMMGrpcIosHelperGenerator(AuxGenerator):
    ''' Generates GrpcIosClientHelper.kt by copying the template file. '''
    def addHelper(self, response: CodeGeneratorResponse):
        inputName = os.path.join(os.path.dirname(sys.argv[0]),
                                 "GrpcIosClientHelper.kt")
        f = open(inputName, "r")
        template = str(f.read())
        f.close()
        helperPkg = self.parameters["helper_package"]
        template = template.replace("package org.example.proto",
                                    "package " + helperPkg)
        file = response.file.add()
        file.name = "GrpcIosClientHelper.kt"
        file.content = template

    def getClientVariety(self):
        return "IosClientHelper"
    
    
class KMMGrpcIosDelegateGenerator(AuxGenerator):
    ''' Generates the Kotlin interface for the delegate which is actually
        implemented in Swift. '''
    def getClientVariety(self):
        return "IosDelegate"

    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass

    def getServiceEntity(self):
        return "interface"
    
    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto) -> list[str]:
        return self.getMethodSignature(
            protoFile,
            serv,
            method,
            withCallbacks=True
        ) + [""]

    def getReturn(self, protoFile: FileDescriptorProto,
                  method: MethodDescriptorProto) -> list[str]:
        return self.getResultCallbackInLieuOfReturn(protoFile, method)
    
    def getSuspendKeyword(self) -> str:
        # Can't use suspend in Kotlin-Swift bridge
        return ""
        

class KMMGrpcIosClientGenerator(AuxGenerator):
    ''' Generates the GrpcIosClient (Kotlin, implementing the shared interface).
    '''
    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass
    
    def getClientVariety(self):
        return "IosClient"

    def getServiceImports(self, protoFile: FileDescriptorProto,
                          serv: ServiceDescriptorProto) -> list[str]:
        lines = super().getServiceImports(protoFile, serv)
        helperPkg = self.parameters["helper_package"]
        importHelper = "import %s.GrpcIosClientHelper" % helperPkg
        lines.extend([
            "import kotlinx.coroutines.flow.Flow",
            importHelper + ".unaryCall",
            importHelper + ".serverStreamingCall",
            importHelper + ".clientStreamingCall",
            importHelper + ".bidirectionalStreamingCall",
            "",
        ])
        return lines
    
    def getServiceHeader(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto) -> list[str]:
        serviceName = self.getServiceName(protoFile, serv)
        lines = super().getServiceHeader(protoFile, serv)
        return lines + [
            "    private val delegate: %sGrpcIosDelegate" % serviceName,
            "): %sGrpcClient {" % serviceName,
        ]

    def getServiceOpenBracket(self):
        return "("

    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto) -> list[str]:
        lines = self.getMethodSignature(protoFile,
                                        serv,
                                        method,
                                        withCallbacks=False)
        lines[0] = "    override " + lines[0][4:]
        lines[-1] += " = "
        methodName = self.memberCase(method.name)
        if method.client_streaming and method.server_streaming:
            lines[-1] += "bidirectionalStreamingCall(request) {"
            body = "delegate.%s(it)"
        elif method.client_streaming:
            lines[-1] += "clientStreamingCall(request) {"
            body = "delegate.%s(it)"
        elif method.server_streaming:
            lines[-1] += "serverStreamingCall {"
            body = "delegate.%s(request, it)"
        else:
            lines[-1] += "unaryCall {"
            body = "delegate.%s(request, it)"
        lines.append("        " + body % methodName)
        lines.extend(["    }", ""])
        return lines


class KMMGrpcIosMainGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-ios-main")
        self.helperGenerator = KMMGrpcIosHelperGenerator()
        self.delegateGenerator = KMMGrpcIosDelegateGenerator()
        self.clientGenerator = KMMGrpcIosClientGenerator()
    
    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass

    def process(self, req: CodeGeneratorRequest,
                response: CodeGeneratorResponse):
        self.helperGenerator.loadParameters(req)
        self.helperGenerator.addHelper(response)
        self.delegateGenerator.process(req, response)
        self.clientGenerator.process(req, response)
    

def main():
    KMMGrpcIosMainGenerator().runOnStdinAndStdout()

if __name__ == "__main__":
    main()
