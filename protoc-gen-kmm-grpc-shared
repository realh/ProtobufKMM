#!/usr/bin/env python3

from google.protobuf.compiler.plugin_pb2 import CodeGeneratorResponse
from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    ServiceDescriptorProto, MethodDescriptorProto

from generator import Generator

class KMMGrpcSharedGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-shared")
    
    def getClientVariety(self):
        return "Client"
    
    def getServiceImports(self, protoFile: FileDescriptorProto,
                          serv: ServiceDescriptorProto) -> list[str]:
        lines = super().getServiceImports(protoFile, serv)
        lines.extend([
            "import kotlinx.coroutines.flow.Flow",
            ""
        ])
        return lines
    
    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass

    def getOutputFileName(self, protoFileName: str, packageName: str) -> str:
        return self.typeNameCase(packageName) + "GrpcClient.kt"

    def getFooter(self, protoFile: FileDescriptorProto) -> list[str]:
        return [""]
    
    def getServiceHeader(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto) -> list[str]:
        lines = super().getServiceHeader(protoFile, serv)
        protoName = self.typeNameCase(protoFile.package)
        serviceName = self.getServiceName(protoFile, serv)
        last = lines.pop()
        return lines + [
            "@ObjcName(swiftName = %s_%sKMMGrpcClient)" % \
                (protoName, serviceName),
            last
        ]

    def getServiceEntity(self):
        ''' "class", "interface" etc for a service definition. '''
        return "interface"
    
    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto,
                        indentationLevel: int) -> list[str]:
        return self.getMethodSignature(protoFile,
                                        serv,
                                        method,
                                        indentationLevel) + [""]


def main():
    generator = KMMGrpcSharedGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
