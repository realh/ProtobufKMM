#!/usr/bin/env python3

from google.protobuf.compiler.plugin_pb2 import \
    CodeGeneratorRequest, CodeGeneratorResponse
from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    ServiceDescriptorProto, MethodDescriptorProto

from generator import Generator

class KMMGrpcSwiftGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-swift", swift=True)
        self.helperGenerator = KMMGrpcClientStreamerGenerator()
    
    def process(self, req: CodeGeneratorRequest,
                response: CodeGeneratorResponse):
        super().process(req, response)
        self.helperGenerator.addHelper(response)

    def processMessagesAndEnums(self, protoFile: FileDescriptorProto,
                                response: CodeGeneratorResponse):
        pass

    def getClientVariety(self):
        return "IosDelegate"
    
    def getFooter(self, protoFile: FileDescriptorProto) -> list[str]:
        return [""]
    
    def getServiceHeader(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto) -> list[str]:
        clientPrefix = "%s_%s" % (self.typeNameCase(protoFile.package),
            self.typeNameCase(serv.name))
        clientType = clientPrefix + "ClientProtocol"
        lines = super().getServiceHeader(protoFile, serv)
        return lines + [
            "    private let client: %s" % clientType,
            "",
            "    init(client: %s) {" % clientType,
            "        self.client = client",
            "    }",
            "",
        ]

    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto) -> list[str]:
        protoPrefix = self.typeNameCase(protoFile.package)
        reqType = self.convertTypeName(method.input_type)
        resultType = self.convertTypeName(method.output_type)
        methodName = self.memberCase(method.name)
        lines = self.getMethodSignature(protoFile,
                                        serv,
                                        method)
        lines[-1] += " {"
        if method.client_streaming:
            body = [
                "let call = client.%s()" % methodName,
            ]
        else:
            body = [
                "let req = %s_%s.from(data: request)" % (protoPrefix, reqType),
                "let call = client.%s(req)" % methodName
            ]
        if method.server_streaming:
            body[-1] += " {"
            body += ["    result($0.toData(), nil)", "}"]
        else:
            body += [
                "let response = call.response",
                "response.whenSuccess {",
                "    result($0.toData(), nil)",
                "}",
                "response.whenFailure {",
                "    result(nil, $0.localizedDescription)",
                "}",
            ]
        if method.client_streaming:
            body += [
                "return GrpcClientStreamer(call) {",
                "    guard let data = $0 as? %s else { return nil }" % reqType,
                "    return %s_%s.from(data: data)" % \
                    (protoPrefix, reqType),
                "}"
            ]
        body = ["        " + l for l in body]
        return lines + body + ["    }", ""]


class KMMGrpcClientStreamerGenerator(Generator):
    ''' Generates GrpcClientStreamer.swift by copying streamerCode. '''
    def __init__(self):
        super().__init__(baseName="kmm-grpc-swift", swift=True)
    
    def addHelper(self, response: CodeGeneratorResponse):
        self.addResponseFile("", "",
                             response,
                             streamerCode.split("\n"))
        return response

    def getOutputFilenameForClass(self, protoName: str,
                                  className: str) -> str:
        return "GrpcClientStreamer.swift"

    def getClientVariety(self):
        return "ClientStreamer"
    

streamerCode = '''import GRPC

private class GrpcClientStreamer<T, R>: GrpcIosClientHelperClientStreamer {
    let call: ClientStreamingCall<T, R>
    let converter: (Any?)->T?
    
    init(_ call: ClientStreamingCall<T, R>, converter: @escaping (Any)->T?) {
        self.call = call
        self.converter = converter
    }
    
    func send(message: Any?) {
        let msg = converter(message)
        guard let msg = msg else { return }
        _ = call.sendMessage(msg)
    }
    
    func finish() {
        _ = call.sendEnd()
    }
}
'''
    

def main():
    generator = KMMGrpcSwiftGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
