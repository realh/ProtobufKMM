#!/usr/bin/env python3

from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    EnumDescriptorProto, DescriptorProto, \
    ServiceDescriptorProto, MethodDescriptorProto

from generator import Generator

class KMMGrpcSwiftGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-grpc-swift", swift=True)
    
    def getOutputFileName(self, protoFileName: str, packageName: str) -> str:
        return self.typeNameCase(packageName) + "GrpcIosDelegate.swift"

    def processEnum(self, enum: EnumDescriptorProto,
                    indentationLevel: int) -> list[str]:
        return []

    def processMessage(self, msg: DescriptorProto,
                       indentationLevel: int) -> list[str]:
        return []

    def getHeader(self, protoFile: FileDescriptorProto) -> list[str]:
        shared = self.parameters.get("shared_module", "shared")
        return [
            "import Foundation",
            "import GRPC",
            "import " + str(shared),
            "",
        ]
    
    def getFooter(self, protoFile: FileDescriptorProto) -> list[str]:
        return [""]
    
    def getTopLevelIndentation(self, protoFile: FileDescriptorProto) -> int:
        return 0

    def getServiceHeader(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto,
                         indentationLevel: int) -> list[str]:
        serviceName = self.getServiceName(protoFile, serv)
        clientPrefix = "%s_%s" % (self.typeNameCase(protoFile.package),
            self.typeNameCase(serv.name))
        clientType = clientPrefix + "ClientProtocol"
        return [
            "class %sGrpcIosDelegate {" % serviceName,
            "    private let client: %s" % clientType,
            "",
            "    init(client: %s) {" % clientType,
            "        self.client = client",
            "    }",
            "",
        ]

    def getServiceFooter(self, protoFile: FileDescriptorProto,
                         serv: ServiceDescriptorProto,
                         indentationLevel: int) -> list[str]:
        s = '''
private class ClientStreamer<T, R>: GrpcIosClientHelperClientStreamer {
    let call: ClientStreamingCall<T, R>
    let converter: (Any?)->T?
    
    init(_ call: ClientStreamingCall<T, R>, converter: @escaping (Any)->T?) {
        self.call = call
        self.converter = converter
    }
    
    func send(message: Any?) {
        let msg = converter(message)
        guard let msg = msg else { return }
        _ = call.sendMessage(msg)
    }
    
    func finish() {
        _ = call.sendEnd()
    }
}
        '''
        lines = s.split("\n")
        lines = ["    " + l for l in lines]
        return lines + ["}"]

    def getServiceMethod(self, protoFile: FileDescriptorProto,
                        serv: ServiceDescriptorProto,
                        method: MethodDescriptorProto,
                        indentationLevel: int) -> list[str]:
        protoPrefix = self.typeNameCase(protoFile.package)
        reqType = self.convertTypeName(method.input_type)
        resultType = self.convertTypeName(method.output_type)
        methodName = self.memberCase(method.name)
        lines = self.getMethodSignature(protoFile,
                                        serv,
                                        method,
                                        indentationLevel)
        lines[-1] += " {"
        if method.client_streaming:
            body = [
                "let call = client.%s()" % methodName,
            ]
        else:
            body = [
                "let req = %s_%s.from(data: request)" % (protoPrefix, reqType),
                "let call = client.%s(req)" % methodName
            ]
        if method.server_streaming:
            body[-1] += " {"
            body += ["    result($0.toData(), nil)", "}"]
        else:
            body += [
                "let response = call.response",
                "response.whenSuccess {",
                "    result($0.toData(), nil)",
                "}",
                "response.whenFailure {",
                "    result(nil, $0.localizedDescription)",
                "}",
            ]
        if method.client_streaming:
            body += [
                "return ClientStreamer(call) {",
                "    guard let data = $0 as? " +
                    "AngelProtoData.%s else { return nil }" % reqType,
                "    return %s_%s.from(data: data)" % \
                    (protoPrefix, reqType),
                "}"
            ]
        body = ["        " + l for l in body]
        return lines + body + ["    }", ""]


def main():
    generator = KMMGrpcSwiftGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
