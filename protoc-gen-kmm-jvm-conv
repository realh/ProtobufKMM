#!/usr/bin/env python3

from google.protobuf.compiler.plugin_pb2 import \
    CodeGeneratorRequest, CodeGeneratorResponse
from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    EnumDescriptorProto, DescriptorProto, \
    FieldDescriptorProto

from generator import Generator

class JvmConvGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-jvm-conv")
        self.orNulls: set[str] = set()
    
    def getDataHeader(self, protoFile: FileDescriptorProto) -> list[str]:
        return ["package " + self.kmmPackage, ""]
    
    def processEnum(self, prefix: str, enum: EnumDescriptorProto,
                    indentationLevel: int) -> list[str]:
        typeName = self.convertTypeName(enum.name)
        kmmType = typeName
        jvmType = "%s.%s" % (self.javaPackage, typeName)
        lines = [
            "fun %s.toProto(): %s {" % (kmmType, jvmType),
            "    return %s.forNumber(this.value)" % jvmType,
            "}",
            "",
            "fun %s.Companion.fromProto(" % kmmType,
            "    proto: %s" % jvmType,
            "): %s {" % kmmType,
            "    return %s from proto.number" % kmmType,
            "}",
            "",
        ]
        return lines

    def processMessage(self, prefix: str,
                       msg: DescriptorProto,
                       indentationLevel: int) -> list[str]:
        self.orNulls: set[str] = set()
        typeName = self.typeNameCase(msg.name)
        if typeName.endswith("?"):
            typeName = typeName[:-1]
        kmmType = "%s" % typeName
        jvmType = "%s.%s" % (self.javaPackage, typeName)
        dslName = "%s.%s" % (self.javaPackage, self.memberCase(typeName))
        lines = [
            "fun %s.toProto(): %s {" % (kmmType, jvmType),
            "    val data = this",
            "    return %s {" % dslName,
        ]
        for field in msg.field:
            lines.extend(self.processFieldToJvm(msg, field))
        lines.extend([
            "    }",
            "}",
            "",
            "fun %s.Companion.fromProto(" % kmmType,
            "    proto: %s" % jvmType,
            ") = %s(" % kmmType,
        ])
        for field in msg.field:
            lines.extend(self.processFieldFromJvm(msg, field))
        lines.extend([
            ")",
            "",
        ])
        if len(self.orNulls) > 0:
            lines = [
                "import %s.%sOrNull" % (self.javaPackage, f)
                for f in self.orNulls
            ] + [""] + lines
        return lines

    def processFieldToJvm(self, msg: DescriptorProto,
                          field: FieldDescriptorProto) -> list[str]:
        fieldName = self.memberCase(field.name)
        typeName = self.getTypeName(field.type, field.type_name)
        builtIn = self.typeIsBuiltIn(field.type, field.type_name)
        isList = field.label == FieldDescriptorProto.LABEL_REPEATED
        if isList and not builtIn:
            conv = ".map { it.toProto() }"
        elif builtIn:
            conv = ""
        else:
            conv = ".toProto()"
        if isList:
            return ["        this.%s += data.%s%s" % \
                (fieldName, fieldName, conv)]
        elif not isList and typeName.endswith("?"):
            return ["        data.%s?.let { this.%s = it%s }" % \
                (fieldName, fieldName, conv)]
        else:
            return ["        this.%s = data.%s%s" % \
                (fieldName, fieldName, conv)]

    def processFieldFromJvm(self, msg: DescriptorProto,
                     field: FieldDescriptorProto) -> list[str]:
        isList = field.label == FieldDescriptorProto.LABEL_REPEATED
        fieldName = self.memberCase(field.name)
        typeName = self.getTypeName(field.type, field.type_name)
        if typeName.endswith("?") and not isList:
            typeName = typeName[:-1]
            optional = True
            self.orNulls.add(fieldName)
        else:
            optional = False
        if typeName.endswith("?"):
            typeName = typeName[:-1]
        kmmType = "%s" % typeName
        builtIn = self.typeIsBuiltIn(field.type, field.type_name)
        if isList and not builtIn:
            expr = "proto.%sList.map { %s.fromProto(it) }" % \
                (fieldName, kmmType)
        elif isList and builtIn:
            expr = "proto.%sList" % fieldName
        elif builtIn:
            expr = "proto.%s" % fieldName
        elif optional:
            expr = "proto.%sOrNull?.let { %s.fromProto(it) }" % \
                (fieldName, kmmType)
        else:
            expr = "%s.fromProto(proto.%s)" % (kmmType, fieldName)
        return ["    %s = %s," % (fieldName, expr)]

    def processServices(self, protoFile: FileDescriptorProto,
                        response: CodeGeneratorResponse):
        pass


def main():
    generator = JvmConvGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
