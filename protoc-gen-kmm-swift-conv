#!/usr/bin/env python3

from google.protobuf.compiler.plugin_pb2 import \
    CodeGeneratorRequest, CodeGeneratorResponse
from google.protobuf.descriptor_pb2 import \
    FileDescriptorProto, \
    EnumDescriptorProto, DescriptorProto, \
    FieldDescriptorProto

from generator import Generator

class AuxGenerator(Generator):
    ''' Base for a helper class which makes it possible for an owner generator
        to make two passes on each message and enum. It has empty
        processMessagesAndEnums and processServices so that its super
        implementation of Generator.processProtoFile can load options etc
        but defer the actual processing to the owner. '''
    def __init__(self,knownTypes: list[str | None],
                 knownTypesByName: dict[str, str]):
        super().__init__(baseName="kmm-swift-conv")
        self.knownTypes = knownTypes
        self.knownTypesByName = knownTypesByName

class ToSwiftGenerator(AuxGenerator):
    ''' A helper class which makes it possible for the main generator to make
        two passes on each message using the super processMessage(); this
        handles the pass for converting the KMM data classes to their Swift
        implementations, using extensions on the Swift classes. '''
    def messageOpening(self, prefix: str, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        prefix = prefix.replace(".", "")
        typeName = self.typeNameCase(name)
        if typeName.endswith("?"): typeName = typeName[:-1]
        # swiftName = "%s_%s" % (self.packageName, typeName)
        swiftName = "Self"
        dataName = "%s%s" % (prefix, typeName)
        indent = "    " * indentationLevel
        return [
            indent + "static func from(data: %s) -> %s {" % \
                (dataName, swiftName),
            indent + "    return %s.with {" % swiftName,
        ]
    
    def messageClosing(self, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        indent = "    " * indentationLevel
        return [indent + "    }", indent + "}"]

    def processField(self, msg: DescriptorProto,
                     field: FieldDescriptorProto,
                     indentationLevel: int) -> list[str]:
        indentationLevel += 1
        ktFieldName = self.memberCase(field.name)
        swFieldName = self.swiftMemberCase(field.name)
        typeName = self.getTypeName(field.type, field.type_name)
        builtIn = self.typeIsBuiltIn(field.type, field.type_name)
        swiftName = "%s_%s" % (self.packageName, typeName)
        indent = "    " * indentationLevel
        if swiftName.endswith("?"):
            optional = True
            swiftName = swiftName[:-1]
        else:
            optional = False
        isList = field.label == FieldDescriptorProto.LABEL_REPEATED
        if isList and not builtIn:
            conv = "data.%s.map { %s.from(data: $0) }" % \
                (ktFieldName, swiftName)
        elif builtIn:
            conv = "data.%s" % ktFieldName
            if typeName.startswith("U"):
                conv = "%s(%s)" % (typeName, conv)
        elif optional and not isList:
            conv = "%s.from(data: %s)" % (swiftName, ktFieldName)
        else:
            conv = "%s.from(data: data.%s)" % (swiftName, ktFieldName)
        conv = indent + "$0.%s = %s" % (swFieldName, conv)
        if optional and not isList:
            lines = [
                indent + "if let %s = data.%s {" % (ktFieldName, ktFieldName),
                "    " + conv,
                indent + "}"
            ]
        else:
            lines = [ conv ]
        return lines


class FromSwiftGenerator(AuxGenerator):
    ''' A helper class which makes it possible for the main generator to make
        two passes on each message using the super processMessage(); this
        handles the pass for adding extensions to the Swift message classes to
        convert them to their KMM data counterparts. '''
    def messageOpening(self, prefix: str, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        prefix = prefix.replace(".", "")
        typeName = self.typeNameCase(name)
        if typeName.endswith("?"): typeName = typeName[:-1]
        indent = "    " * indentationLevel
        return [
            indent + "func toData() -> %s%s {" % (prefix, typeName),
            indent + "    return %s%s(" % (prefix, typeName)
        ]
    
    def messageClosing(self, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        indent = "    " * indentationLevel
        return [indent + "    )", indent + "}"]

    def processField(self, msg: DescriptorProto,
                     field: FieldDescriptorProto,
                     indentationLevel: int) -> list[str]:
        ktFieldName = self.memberCase(field.name)
        swFieldName = self.swiftMemberCase(field.name)
        has = "has" + swFieldName[0].upper() + swFieldName[1:]
        typeName = self.getTypeName(field.type, field.type_name)
        if typeName.endswith("?"):
            typeName = typeName[:-1]
            optional = True
        else:
            optional = False
        builtIn = self.typeIsBuiltIn(field.type, field.type_name)
        isList = field.label == FieldDescriptorProto.LABEL_REPEATED
        if isList and not builtIn:
            expr = "%s.map { $0.toData() }" % swFieldName
        elif optional:
            expr = "%s ? %s.toData() : nil" % (has, swFieldName)
        elif builtIn:
            expr = swFieldName
            if typeName.startswith("U"):
                expr = "%s(%s)" % (typeName[1:], expr)
        else:   # enum
            expr = "%s.toData()" % swFieldName
        indent = "    " * indentationLevel
        return [indent + "    %s: %s," % (ktFieldName, expr)]


class SwiftConvGenerator(Generator):
    def __init__(self):
        super().__init__(baseName="kmm-swift-conv")
        self.knownTypes = (
            None,
            "Double", "Float", "Int64", "UInt64", "Int32",
            "Int64", "Int32", "Bool", "String",
            None, # Group
            None, # Message
            "[UInt8]", "UInt32",
            None, # Enum
            "Int32", "Int64",
            "Int32", "Int64"
        )
        self.knownTypesByName = {
            "double": "Double",
            "float": "Float",
            "int32": "Int32",
            "int64": "Int64",
            "uint32": "UInt32",
            "uint64": "UInt64",
            "sint32": "Int32",
            "sint64": "Int64",
            "fixed32": "Int32",
            "fixed64": "Int64",
            "sfixed32": "Int32",
            "sfixed64": "Int64",
            "bool": "Bool",
            "string": "String",
            "bytes": "[UInt8]"
        }
        self.toSwift = ToSwiftGenerator(self.knownTypes,
                                        self.knownTypesByName)
        self.fromSwift = FromSwiftGenerator(self.knownTypes,
                                            self.knownTypesByName)
    
    def getRole(self):
        return "Converter"

    def loadParameters(self, req: CodeGeneratorRequest):
        super().loadParameters(req)
        self.toSwift.parameters = self.parameters
        self.fromSwift.parameters = self.parameters

    def loadOptions(self, protoFile: FileDescriptorProto):
        super().loadOptions(protoFile)
        self.toSwift.loadOptions(protoFile)
        self.fromSwift.loadOptions(protoFile)

    def processEnum(self, prefix: str, enum: EnumDescriptorProto,
                    indentationLevel: int) -> list[str]:
        prefix = prefix.replace(".", "")
        typeName = self.typeNameCase(enum.name)
        swiftName = "%s_%s" % (self.packageName, typeName)
        companion = "%s.%sCompanion.shared" % (prefix, typeName)
        lines = [
            "extension %s {" % swiftName,
            "    func toData() -> %s%s {" % (prefix, typeName),
            "        return %s.from(value: Int32(rawValue))" % companion,
            "    }",
            "",
            # The Swift constructor here returns an optional, but it can never
            # be nil because missing cases are converted to .UNKNOWN(rawValue)
            # so it's safe to just use ! here.
            "    static func from(data: %s%s) -> %s {" % \
                (prefix, typeName, swiftName),
            "        return %s(rawValue: Int(data.value))!" % swiftName,
            "    }",
            "}"
        ]
        indent = "    " * indentationLevel
        lines = [indent + l for l in lines]
        return lines

    def messageOpening(self, prefix: str, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        typeName = self.typeNameCase(name)
        if typeName.endswith("?"): typeName = typeName[:-1]
        swiftName = "%s_%s" % (self.packageName, typeName)
        indent = "    " * indentationLevel
        return [
            indent + "extension %s {" % swiftName,
        ]

    def messageClosing(self, msg: DescriptorProto,
                       name: str, indentationLevel: int) -> list[str]:
        indent = "    " * indentationLevel
        return [ indent + "}" ]

    def processMessage(self, prefix: str, msg: DescriptorProto,
                       indentationLevel: int) -> list[str]:
        lines = self.messageOpening(prefix, msg, msg.name, indentationLevel)
        closing = self.messageClosing(msg, msg.name, indentationLevel)
        indentationLevel += 1
        return lines + \
            self.fromSwift.processMessage(prefix, msg, indentationLevel) + \
            [""] + \
            self.toSwift.processMessage(prefix, msg, indentationLevel) + \
            closing

    def getFooter(self, protoFile: FileDescriptorProto) -> list[str]:
        return []
    
    def processServices(self, protoFile: FileDescriptorProto,
                        response: CodeGeneratorResponse):
        pass


def main():
    generator = SwiftConvGenerator()
    generator.runOnStdinAndStdout()

if __name__ == "__main__":
    main()
